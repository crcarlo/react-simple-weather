{"version":3,"sources":["components/SimpleWeather.js","example/WeatherCardRow.js","example/WeatherCard.js","App.js","serviceWorker.js","index.js"],"names":["SimpleWeather","state","latitude","longitude","this","props","apiBaseUrl","unit","fetch","concat","response","json","responseBody","responseBodyJson","JSON","parse","setState","weather","location","woeid","_this$props4","getWeatherFromLatitudeLongitude","getWeatherFromLocation","getWeatherFromWoeid","children","_this$state","errorMessage","react_default","a","createElement","Fragment","Component","defaultProps","WeatherCardRow","_ref","icon","restProps","Object","objectWithoutProperties","assign","style","display","justifyContent","width","paddingBottom","compass","WeatherCard","weatherDescription","weatherCode","temperature","wind","className","fontSize","flexDirection","textAlign","city","region","country","paddingTop","alignItems","Math","round","direction","marginLeft","speed","App","_this2","navigator","geolocation","getCurrentPosition","console","log","coords","SimpleWeather_SimpleWeather","current_observation","condition","text","code","Boolean","window","hostname","match","ReactDOM","render","src_App_0","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2eda882f.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nexport default class SimpleWeather extends Component {\r\n  state = {};\r\n\r\n  static defaultProps = {\r\n    unit: \"c\"\r\n  };\r\n\r\n  async getWeatherFromLatitudeLongitude(latitude, longitude) {\r\n    const { apiBaseUrl, unit } = this.props;\r\n    const response = await fetch(\r\n      `${apiBaseUrl}forecastrss?lat=${latitude}&lon=${longitude}&format=json` +\r\n        (unit && `&u=${unit}`)\r\n    );\r\n    const responseBody = await response.json();\r\n    const responseBodyJson = JSON.parse(responseBody);\r\n    this.setState({ weather: responseBodyJson });\r\n  }\r\n\r\n  async getWeatherFromLocation(location) {\r\n    const { apiBaseUrl, unit } = this.props;\r\n    const response = await fetch(\r\n      `${apiBaseUrl}forecastrss?location=${location}&format=json` +\r\n        (unit && `&u=${unit}`)\r\n    );\r\n    const responseBody = await response.json();\r\n    const responseBodyJson = JSON.parse(responseBody);\r\n    this.setState({ weather: responseBodyJson });\r\n  }\r\n\r\n  async getWeatherFromWoeid(woeid) {\r\n    const { apiBaseUrl, unit } = this.props;\r\n    const response = await fetch(\r\n      `${apiBaseUrl}forecastrss?woeid=${woeid}&format=json` +\r\n        (unit && `&u=${unit}`)\r\n    );\r\n    const responseBody = await response.json();\r\n    const responseBodyJson = JSON.parse(responseBody);\r\n    this.setState({ weather: responseBodyJson });\r\n  }\r\n\r\n  componentDidMount() {\r\n    const { latitude, longitude, location, woeid } = this.props;\r\n\r\n    if (latitude != null && longitude != null) {\r\n      this.getWeatherFromLatitudeLongitude(latitude, longitude);\r\n    } else if (location) {\r\n      this.getWeatherFromLocation(location);\r\n    } else if (woeid) {\r\n      this.getWeatherFromWoeid(woeid);\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { children } = this.props;\r\n    const { weather, errorMessage } = this.state;\r\n\r\n    return <>{children(weather, errorMessage)}</>;\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport default ({ icon, children, ...restProps }) => (\r\n  <div\r\n    style={{\r\n      display: \"flex\",\r\n      justifyContent: \"space-between\",\r\n      width: 260,\r\n      paddingBottom: 20\r\n    }}\r\n    {...restProps}\r\n  >\r\n    {icon}\r\n    <div>{children}</div>\r\n  </div>\r\n);\r\n","import React from \"react\";\r\nimport WeatherCardRow from \"./WeatherCardRow\";\r\n\r\nconst compass = [\r\n  \"n\",\r\n  \"nne\",\r\n  \"ne\",\r\n  \"ene\",\r\n  \"e\",\r\n  \"ese\",\r\n  \"se\",\r\n  \"sse\",\r\n  \"s\",\r\n  \"ssw\",\r\n  \"sw\",\r\n  \"wsw\",\r\n  \"w\",\r\n  \"wnw\",\r\n  \"nw\",\r\n  \"nnw\",\r\n  \"n\"\r\n];\r\n\r\nexport default ({\r\n  location,\r\n  weatherDescription,\r\n  weatherCode,\r\n  temperature,\r\n  wind\r\n}) => (\r\n  <div className=\"weather-card\">\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        justifyContent: \"space-between\"\r\n      }}\r\n    >\r\n      <div\r\n        style={{\r\n          fontSize: 20,\r\n          display: \"flex\",\r\n          flexDirection: \"column\",\r\n          justifyContent: \"center\",\r\n          textAlign: \"left\"\r\n        }}\r\n      >\r\n        <div>\r\n          {location.city}, {location.region}\r\n        </div>\r\n        <div style={{ fontSize: 16 }}>{location.country}</div>\r\n      </div>\r\n      <div style={{ width: 120 }}>\r\n        <i\r\n          style={{\r\n            fontSize: 40,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            justifyContent: \"center\",\r\n            paddingBottom: 10\r\n          }}\r\n          className={\"wi wi-yahoo-\" + weatherCode}\r\n        />\r\n        <span>{weatherDescription}</span>\r\n      </div>\r\n    </div>\r\n    <div\r\n      style={{\r\n        display: \"flex\",\r\n        flexDirection: \"column \",\r\n        paddingTop: 40,\r\n        alignItems: \"center\"\r\n      }}\r\n    >\r\n      <WeatherCardRow\r\n        icon={\r\n          <i\r\n            style={{\r\n              fontSize: 30\r\n            }}\r\n            className=\"wi wi-thermometer\"\r\n          />\r\n        }\r\n      >\r\n        <div style={{ fontSize: 24 }}>\r\n          <span> {temperature}</span>\r\n          <i className=\"wi wi-celsius\" />\r\n        </div>\r\n      </WeatherCardRow>\r\n      <WeatherCardRow\r\n        icon={\r\n          <i\r\n            style={{\r\n              fontSize: 30\r\n            }}\r\n            className={\"wi wi-strong-wind\"}\r\n          />\r\n        }\r\n      >\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            fontSize: 24\r\n          }}\r\n        >\r\n          <i\r\n            style={{\r\n              fontSize: 30\r\n            }}\r\n            className={\r\n              \"wi wi-wind wi-from-\" + compass[Math.round(wind.direction / 22.5)]\r\n            }\r\n          />\r\n          <span style={{ marginLeft: 5 }}>\r\n            {Math.round(wind.speed) + \"  km/h\"}\r\n          </span>\r\n        </div>\r\n      </WeatherCardRow>\r\n    </div>\r\n  </div>\r\n);\r\n","import React, { Component } from \"react\";\r\nimport \"./App.css\";\r\nimport SimpleWeather from \"./components/SimpleWeather\";\r\nimport WeatherCard from \"./example/WeatherCard\";\r\n\r\nclass App extends Component {\r\n  state = {};\r\n\r\n  componentDidMount() {\r\n    navigator.geolocation.getCurrentPosition(location => {\r\n      console.log(\r\n        \"COORDS\",\r\n        location.coords.latitude + \",\" + location.coords.longitude\r\n      );\r\n      this.setState({\r\n        //'45.6481607,12.340719'\r\n        latitude: location.coords.latitude,\r\n        longitude: location.coords.longitude\r\n      });\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const { latitude, longitude } = this.state;\r\n\r\n    return (\r\n      <div\r\n        className=\"App\"\r\n        style={{ display: \"flex\", justifyContent: \"center\" }}\r\n      >\r\n        {this.state.latitude && this.state.longitude ? (\r\n          <SimpleWeather\r\n            apiBaseUrl=\"https://yahoo-weather-api-proxy.now.sh/\"\r\n            latitude={latitude}\r\n            longitude={longitude}\r\n            unit=\"c\"\r\n          >\r\n            {(weather, errorMessage) => {\r\n              if (errorMessage) {\r\n                return <div>{errorMessage}</div>;\r\n              }\r\n              if (weather) {\r\n                console.log(\"WEATHER\", weather);\r\n                console.log(\"LOCATION\", weather.location);\r\n                return (\r\n                  <WeatherCard\r\n                    location={{\r\n                      city: weather.location.city,\r\n                      region: weather.location.region,\r\n                      country: weather.location.country\r\n                    }}\r\n                    weatherDescription={\r\n                      weather.current_observation.condition.text\r\n                    }\r\n                    weatherCode={weather.current_observation.condition.code}\r\n                    temperature={\r\n                      weather.current_observation.condition.temperature\r\n                    }\r\n                    wind={weather.current_observation.wind}\r\n                  />\r\n                );\r\n              }\r\n              return <div>Loading</div>;\r\n            }}\r\n          </SimpleWeather>\r\n        ) : (\r\n          <div>Loading</div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === \"localhost\" ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === \"[::1]\" ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener(\"load\", () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            \"This web app is being served cache-first by a service \" +\r\n              \"worker. To learn more, visit http://bit.ly/CRA-PWA\"\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === \"installed\") {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                \"New content is available and will be used when all \" +\r\n                  \"tabs for this page are closed. See http://bit.ly/CRA-PWA.\"\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log(\"Content is cached for offline use.\");\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error(\"Error during service worker registration:\", error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get(\"content-type\").indexOf(\"javascript\") === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        \"No internet connection found. App is running in offline mode.\"\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if (\"serviceWorker\" in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}